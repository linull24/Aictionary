name: Build and Package

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-linux:
    strategy:
      matrix:
        arch: [amd64, arm64]
    runs-on: ubuntu-22.04
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Build Linux ${{ matrix.arch }}
      run: |
        dotnet run --project build/build.csproj -- PublishLinux${{ matrix.arch == 'amd64' && 'Amd64' || 'Arm64' }}
        dotnet run --project build/build.csproj -- PublishLinux${{ matrix.arch == 'amd64' && 'Amd64' || 'Arm64' }}FrameworkDependent
    
    - name: Upload Linux ${{ matrix.arch }} Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: artifacts-linux-${{ matrix.arch }}
        path: artifacts/linux-${{ matrix.arch }}*

  build-windows:
    strategy:
      matrix:
        arch: [amd64, arm64]
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Build Windows ${{ matrix.arch }}
      run: |
        dotnet run --project build/build.csproj -- PublishWindows${{ matrix.arch == 'amd64' && 'Amd64' || 'Arm64' }}
        dotnet run --project build/build.csproj -- PublishWindows${{ matrix.arch == 'amd64' && 'Amd64' || 'Arm64' }}FrameworkDependent
    
    - name: Upload Windows ${{ matrix.arch }} Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: artifacts-windows-${{ matrix.arch }}
        path: artifacts/windows-${{ matrix.arch }}*

  build-macos:
    strategy:
      matrix:
        arch: [intel, arm64]
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Install create-dmg
      run: brew install create-dmg
    
    - name: Build macOS ${{ matrix.arch }}
      run: |
        dotnet run --project build/build.csproj -- PublishMacOS${{ matrix.arch == 'intel' && 'Intel' || 'Arm64' }}
        dotnet run --project build/build.csproj -- PublishMacOS${{ matrix.arch == 'intel' && 'Intel' || 'Arm64' }}FrameworkDependent
    
    - name: Create DMG for ${{ matrix.arch }}
      if: matrix.arch == 'arm64'
      run: dotnet run --project build/build.csproj -- CreateMacOSDmg
    
    - name: Upload macOS ${{ matrix.arch }} Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: artifacts-macos-${{ matrix.arch }}
        path: artifacts/macos-${{ matrix.arch }}*

  package-linux:
    needs: build-linux
    runs-on: ubuntu-22.04
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Linux AMD64 Artifacts
      uses: actions/download-artifact@v4
      with:
        name: artifacts-linux-amd64
        path: artifacts/
    
    - name: Download Linux ARM64 Artifacts
      uses: actions/download-artifact@v4
      with:
        name: artifacts-linux-arm64
        path: artifacts/
    
    - name: Install packaging tools
      run: |
        sudo apt-get update
        sudo apt-get install -y dpkg-dev fakeroot
    
    - name: Build DEB packages
      run: |
        chmod +x scripts/build-deb.sh
        ./scripts/build-deb.sh
    
    - name: Generate PKGBUILD
      run: |
        chmod +x scripts/generate-pkgbuild.sh
        ./scripts/generate-pkgbuild.sh
    
    - name: Upload DEB packages
      uses: actions/upload-artifact@v4
      with:
        name: deb-packages
        path: "*.deb"
    
    - name: Upload PKGBUILD
      uses: actions/upload-artifact@v4
      with:
        name: archlinux-pkgbuild
        path: PKGBUILD

  package-archlinux:
    needs: build-linux
    runs-on: ubuntu-22.04
    container: archlinux:latest
    
    steps:
    - name: Install dependencies
      run: |
        pacman -Syu --noconfirm
        pacman -S --noconfirm base-devel git
    
    - uses: actions/checkout@v4
    
    - name: Download Linux AMD64 Artifacts
      uses: actions/download-artifact@v4
      with:
        name: artifacts-linux-amd64
        path: artifacts/
    
    - name: Download Linux ARM64 Artifacts
      uses: actions/download-artifact@v4
      with:
        name: artifacts-linux-arm64
        path: artifacts/
    
    - name: Create non-root user for makepkg
      run: |
        useradd -m builder
        echo 'builder ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers
        chown -R builder:builder .
    
    - name: Build Arch package
      run: |
        chmod +x scripts/build-arch.sh
        sudo -u builder ./scripts/build-arch.sh
    
    - name: Upload Arch package
      uses: actions/upload-artifact@v4
      with:
        name: archlinux-package
        path: "*.pkg.tar.zst"

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-linux, build-windows, build-macos, package-linux, package-archlinux]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts
    
    - name: Create release archives
      run: |
        cd release-artifacts
        
        # Create archives for each platform
        if [ -d "artifacts-windows-amd64" ]; then
          cd artifacts-windows-amd64
          zip -r ../Aictionary-windows-amd64.zip .
          cd ..
        fi
        
        if [ -d "artifacts-windows-arm64" ]; then
          cd artifacts-windows-arm64
          zip -r ../Aictionary-windows-arm64.zip .
          cd ..
        fi
        
        if [ -d "artifacts-macos-intel" ]; then
          cd artifacts-macos-intel
          tar -czf ../Aictionary-macos-intel.tar.gz .
          cd ..
        fi
        
        if [ -d "artifacts-macos-arm64" ]; then
          cd artifacts-macos-arm64
          tar -czf ../Aictionary-macos-arm64.tar.gz .
          cd ..
        fi
        
        if [ -d "artifacts-linux-amd64" ]; then
          cd artifacts-linux-amd64
          tar -czf ../Aictionary-linux-amd64.tar.gz .
          cd ..
        fi
        
        if [ -d "artifacts-linux-arm64" ]; then
          cd artifacts-linux-arm64
          tar -czf ../Aictionary-linux-arm64.tar.gz .
          cd ..
        fi
    
    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Aictionary ${{ github.ref_name }}
        draft: false
        prerelease: false
        body: |
          ## 下载说明
          
          | 平台 | 自包含版本 | 框架依赖版本 |
          |------|------------|-------------|
          | Windows AMD64 | Aictionary-windows-amd64.zip | 包含在zip中 |
          | Windows ARM64 | Aictionary-windows-arm64.zip | 包含在zip中 |
          | macOS Intel | Aictionary-macos-intel.tar.gz | 包含在tar.gz中 |
          | macOS ARM64 | Aictionary-macos-arm64.tar.gz (包含DMG) | 包含在tar.gz中 |
          | Linux AMD64 | Aictionary-linux-amd64.tar.gz | 包含在tar.gz中 |
          | Linux ARM64 | Aictionary-linux-arm64.tar.gz | 包含在tar.gz中 |
          | Debian包 | aictionary_*.deb | - |
          | Arch包 | aictionary-*.pkg.tar.zst | - |
          
          **使用提示：**
          - macOS用户推荐使用DMG文件安装
          - Windows用户可根据是否安装.NET运行时选择对应版本
          - Linux用户可选择二进制包或系统包管理器安装
    
    - name: Upload Windows AMD64
      if: hashFiles('release-artifacts/Aictionary-windows-amd64.zip') != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-artifacts/Aictionary-windows-amd64.zip
        asset_name: Aictionary-windows-amd64.zip
        asset_content_type: application/zip
    
    - name: Upload Windows ARM64
      if: hashFiles('release-artifacts/Aictionary-windows-arm64.zip') != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-artifacts/Aictionary-windows-arm64.zip
        asset_name: Aictionary-windows-arm64.zip
        asset_content_type: application/zip
    
    - name: Upload macOS Intel
      if: hashFiles('release-artifacts/Aictionary-macos-intel.tar.gz') != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-artifacts/Aictionary-macos-intel.tar.gz
        asset_name: Aictionary-macos-intel.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload macOS ARM64
      if: hashFiles('release-artifacts/Aictionary-macos-arm64.tar.gz') != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-artifacts/Aictionary-macos-arm64.tar.gz
        asset_name: Aictionary-macos-arm64.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload Linux AMD64
      if: hashFiles('release-artifacts/Aictionary-linux-amd64.tar.gz') != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-artifacts/Aictionary-linux-amd64.tar.gz
        asset_name: Aictionary-linux-amd64.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload Linux ARM64
      if: hashFiles('release-artifacts/Aictionary-linux-arm64.tar.gz') != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-artifacts/Aictionary-linux-arm64.tar.gz
        asset_name: Aictionary-linux-arm64.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload DEB packages
      if: hashFiles('release-artifacts/deb-packages/*.deb') != ''
      run: |
        for deb in release-artifacts/deb-packages/*.deb; do
          if [ -f "$deb" ]; then
            filename=$(basename "$deb")
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/vnd.debian.binary-package" \
              --data-binary @"$deb" \
              "${{ steps.create_release.outputs.upload_url }}?name=$filename"
          fi
        done
    
    - name: Upload Arch packages
      if: hashFiles('release-artifacts/archlinux-package/*.pkg.tar.zst') != ''
      run: |
        for pkg in release-artifacts/archlinux-package/*.pkg.tar.zst; do
          if [ -f "$pkg" ]; then
            filename=$(basename "$pkg")
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/zstd" \
              --data-binary @"$pkg" \
              "${{ steps.create_release.outputs.upload_url }}?name=$filename"
          fi
        done

