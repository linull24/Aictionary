name: Build and Package

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-linux:
    strategy:
      matrix:
        arch: [amd64, arm64]
    runs-on: ubuntu-22.04
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Build Linux ${{ matrix.arch }}
      run: |
        dotnet run --project build/build.csproj -- PublishLinux${{ matrix.arch == 'amd64' && 'Amd64' || 'Arm64' }}
        dotnet run --project build/build.csproj -- PublishLinux${{ matrix.arch == 'amd64' && 'Amd64' || 'Arm64' }}FrameworkDependent
    
    - name: Upload Linux ${{ matrix.arch }} Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: artifacts-linux-${{ matrix.arch }}
        path: artifacts/linux-${{ matrix.arch }}*

  build-windows:
    strategy:
      matrix:
        arch: [amd64, arm64]
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Build Windows ${{ matrix.arch }}
      run: |
        dotnet run --project build/build.csproj -- PublishWindows${{ matrix.arch == 'amd64' && 'Amd64' || 'Arm64' }}
        dotnet run --project build/build.csproj -- PublishWindows${{ matrix.arch == 'amd64' && 'Amd64' || 'Arm64' }}FrameworkDependent
    
    - name: Create Windows ZIP archives
      run: |
        cd artifacts
        if (Test-Path "windows-${{ matrix.arch }}") {
          Compress-Archive -Path "windows-${{ matrix.arch }}\*" -DestinationPath "Aictionary-windows-${{ matrix.arch }}.zip"
        }
        if (Test-Path "windows-${{ matrix.arch }}-framework-dependent") {
          Compress-Archive -Path "windows-${{ matrix.arch }}-framework-dependent\*" -DestinationPath "Aictionary-windows-${{ matrix.arch }}-framework-dependent.zip"
        }
    
    - name: Upload Windows ${{ matrix.arch }} Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-${{ matrix.arch }}-packages
        path: artifacts/*.zip

  build-macos:
    strategy:
      matrix:
        arch: [intel, arm64]
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Install create-dmg
      run: brew install create-dmg
    
    - name: Build macOS ${{ matrix.arch }}
      run: |
        dotnet run --project build/build.csproj -- PublishMacOS${{ matrix.arch == 'intel' && 'Intel' || 'Arm64' }}
        dotnet run --project build/build.csproj -- PublishMacOS${{ matrix.arch == 'intel' && 'Intel' || 'Arm64' }}FrameworkDependent
    
    - name: Create DMG for ${{ matrix.arch }}
      run: |
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          dotnet run --project build/build.csproj -- CreateMacOSDmg
        else
          # Create DMG for Intel too
          dmg_file="artifacts/macos-${{ matrix.arch }}/Aictionary.dmg"
          app_bundle="artifacts/macos-${{ matrix.arch }}/Aictionary.app"
          if [ -d "$app_bundle" ]; then
            create-dmg --volname "Aictionary" --window-pos 200 120 --window-size 800 400 --icon-size 128 --app-drop-link 600 185 "$dmg_file" "$app_bundle"
          fi
        fi
    
    - name: Upload macOS ${{ matrix.arch }} Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-${{ matrix.arch }}-packages
        path: artifacts/macos-${{ matrix.arch }}/*.dmg

  build-deb:
    needs: build-linux
    runs-on: ubuntu-22.04
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Linux AMD64 Artifacts
      uses: actions/download-artifact@v4
      with:
        name: artifacts-linux-amd64
        path: artifacts/
    
    - name: Download Linux ARM64 Artifacts
      uses: actions/download-artifact@v4
      with:
        name: artifacts-linux-arm64
        path: artifacts/
    
    - name: Install packaging tools
      run: |
        sudo apt-get update
        sudo apt-get install -y dpkg-dev fakeroot
    
    - name: Build DEB packages
      run: |
        chmod +x scripts/build-deb.sh
        ./scripts/build-deb.sh
    
    - name: Upload DEB packages
      uses: actions/upload-artifact@v4
      with:
        name: deb-packages
        path: "aictionary_*_*.deb"

  build-arch:
    needs: build-linux
    runs-on: ubuntu-22.04
    container: archlinux:latest
    
    steps:
    - name: Install dependencies
      run: |
        pacman -Syu --noconfirm
        pacman -S --noconfirm base-devel git
    
    - uses: actions/checkout@v4
    
    - name: Download Linux AMD64 Artifacts
      uses: actions/download-artifact@v4
      with:
        name: artifacts-linux-amd64
        path: artifacts/
    
    - name: Download Linux ARM64 Artifacts
      uses: actions/download-artifact@v4
      with:
        name: artifacts-linux-arm64
        path: artifacts/
    
    - name: Create non-root user for makepkg
      run: |
        useradd -m builder
        echo 'builder ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers
        chown -R builder:builder .
    
    - name: Build Arch package
      run: |
        chmod +x scripts/build-arch.sh
        sudo -u builder ./scripts/build-arch.sh
    
    - name: Upload Arch package
      uses: actions/upload-artifact@v4
      with:
        name: arch-packages
        path: "aictionary-*-*.pkg.tar.zst"

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-windows, build-macos, build-deb, build-arch]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts
    
    - name: List artifacts
      run: |
        echo "Available artifacts:"
        find release-artifacts -type f -name "*" | sort
    
    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Aictionary ${{ github.ref_name }}
        draft: false
        prerelease: false
        body: |
          ## 下载说明
          
          | 平台 | 自包含版本 | 框架依赖版本 |
          |------|------------|-------------|
          | Windows AMD64 | Aictionary-windows-amd64.zip | 包含在zip中 |
          | Windows ARM64 | Aictionary-windows-arm64.zip | 包含在zip中 |
          | macOS Intel | Aictionary-macos-intel.tar.gz | 包含在tar.gz中 |
          | macOS ARM64 | Aictionary-macos-arm64.tar.gz (包含DMG) | 包含在tar.gz中 |
          | Linux AMD64 | Aictionary-linux-amd64.tar.gz | 包含在tar.gz中 |
          | Linux ARM64 | Aictionary-linux-arm64.tar.gz | 包含在tar.gz中 |
          | Debian包 | aictionary_*.deb | - |
          | Arch包 | aictionary-*.pkg.tar.zst | - |
          
          **使用提示：**
          - macOS用户推荐使用DMG文件安装
          - Windows用户可根据是否安装.NET运行时选择对应版本
          - Linux用户可选择二进制包或系统包管理器安装
    
    - name: Upload all release assets
      run: |
        # Upload Windows ZIP files
        for zip in release-artifacts/windows-*-packages/*.zip; do
          if [ -f "$zip" ]; then
            gh release upload ${{ github.ref_name }} "$zip" --clobber
          fi
        done
        
        # Upload macOS DMG files
        for dmg in release-artifacts/macos-*-packages/*.dmg; do
          if [ -f "$dmg" ]; then
            gh release upload ${{ github.ref_name }} "$dmg" --clobber
          fi
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}64.tar.gz') != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-artifacts/Aictionary-macos-arm64.tar.gz
        asset_name: Aictionary-macos-arm64.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload Linux AMD64
      if: hashFiles('release-artifacts/Aictionary-linux-amd64.tar.gz') != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-artifacts/Aictionary-linux-amd64.tar.gz
        asset_name: Aictionary-linux-amd64.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload Linux ARM64
      if: hashFiles('release-artifacts/Aictionary-linux-arm64.tar.gz') != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-artifacts/Aictionary-linux-arm64.tar.gz
        asset_name: Aictionary-linux-arm64.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload Linux packages
      run: |
        # Upload DEB packages
        for deb in release-artifacts/deb-packages/*.deb; do
          if [ -f "$deb" ]; then
            gh release upload ${{ github.ref_name }} "$deb" --clobber
          fi
        done
        
        # Upload Arch packages
        for pkg in release-artifacts/arch-packages/*.pkg.tar.zst; do
          if [ -f "$pkg" ]; then
            gh release upload ${{ github.ref_name }} "$pkg" --clobber
          fi
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

